setwd("C:/Users/Vivek/Desktop/coursera/R_week2")
makeCacheMatrix <- function(x ) {
# Checking if input is a matrix
if (!is.matrix(x)) {
print("Input must be a matrix.")
return
}
# Checking input is a square matrix
dim_x = dim(x) #dimension of input
if (dim_x[1]!=dim_x[2]) {
print("Inverse can be computed for square matrices only.")
return
}
inv_x <- NULL
set <- function(y) {
x <<- y
inv_x <<- NULL
}
get <- function() x
setinv <- function(inv_set) inv_x <<- inv_set
getinv <- function() inv_x
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
# setting inverse (inv_x) to value stored in x.
inv_x <- x$getinv()
mat_x <- x$get()
dim_x = dim(mat_x) # dimension of matrix
print(dim_x)
if (dim_x[1]!=dim_x[2]) {
print("Inverse can be computed for square matrices only.")
return
}
# if inverse is calculated, return cached value.
if(!is.null(inv_x)) {
# this part checks if stored inverse is the actual inverse
eye_x = diag(dim_x[1]) # making identity matirx
err_x = eye_x - inv_x%*%mat_x # definining error as I - inv(X)*X
# if error is less than threshold (10^-8),return stored value.
if (norm(err_x)<10^-8){
message("getting cached data")
return(inv_x)
}
}
# this part executed only if inverse is not calculated,
# or the stored inverse is not actual inverse.
data <- x$get()
inv_x <-solve(data)
x$setinv(inv_x)
inv_x
}
A<-matrix(rnorm(6,1),3,2)
A
AA<-makeCacheMatrix(A)
A<-matrix(rnorm(6,1),2,2)
A
AA<-makeCacheMatrix(A)
AA
cacheSolve(AA)
A<- rnorm(6,6)
A
A<- rnorm(6)
AA<-makeCacheMatrix(A)
setwd("C:/Users/Vivek/Desktop/coursera/ProgrammingAssignment2")
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix, takes a matrix and caches its value, and inverse
## cacheSolve, takes cached matrix as input, and returns inverse if its cached, if not, computes it.
makeCacheMatrix <- function(x ) {
# Checking if input is a matrix
if (!is.matrix(x)) {
print("Input must be a matrix.")
return
}
# Checking input is a square matrix
dim_x = dim(x) #dimension of input
if (dim_x[1]!=dim_x[2]) {
print("Inverse can be computed for square matrices only.")
return
}
# setting initial value
inv_x <- NULL
set <- function(y) {
x <<- y
inv_x <<- NULL
}
# get function, returns x
get <- function() x
setinv <- function(inv_set) inv_x <<- inv_set # sets inverse
getinv <- function() inv_x  # gets inverse
# making list of functions
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function returns inverse of the matrix.
cacheSolve <- function(x, ...) {
# setting inverse (inv_x) to value stored in x.
inv_x <- x$getinv()
mat_x <- x$get()
dim_x = dim(mat_x) # dimension of matrix
if (dim_x[1]!=dim_x[2]) {
print("Inverse can be computed for square matrices only.")
return
}
# if inverse is calculated, return cached value.
if(!is.null(inv_x)) {
# this part checks if stored inverse is the actual inverse
eye_x = diag(dim_x[1]) # making identity matirx
err_x = eye_x - inv_x%*%mat_x # definining error as I - inv(X)*X
# if error is less than threshold (10^-8),return stored value.
if (norm(err_x)<10^-8){
message("getting cached data")
return(inv_x)
}
}
# this part executed only if inverse is not calculated,
# or the stored inverse is not actual inverse.
data <- x$get() # getting data
inv_x <-solve(data) #solving for inverse
x$setinv(inv_x) #setting inverse
inv_x
}
A<- matrix(rnorm(4,1),2,2)
A
AA<-makeCacheMatrix(A)
cacheSolve(AA)
cacheSolve(AA)
cacheSolve(AA)
cacheSolve(AA)%*%A
A<- matrix(rnorm(4,1),2,2)
AA<-makeCacheMatrix(A)
cacheSolve(AA)%*%A
cacheSolve(AA)%*%A
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix, takes a matrix and caches its value, and inverse
## cacheSolve, takes cached matrix as input, and returns inverse if its cached, if not, computes it.
makeCacheMatrix <- function(x ) {
# Checking if input is a matrix
if (!is.matrix(x)) {
message("Input must be a matrix.")
return
}
# Checking input is a square matrix
dim_x = dim(x) #dimension of input
if (dim_x[1]!=dim_x[2]) {
message("Inverse can be computed for square matrices only.")
return
}
# setting initial value
inv_x <- NULL
set <- function(y) {
x <<- y
inv_x <<- NULL
}
# get function, returns x
get <- function() x
setinv <- function(inv_set) inv_x <<- inv_set # sets inverse
getinv <- function() inv_x  # gets inverse
# making list of functions
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function returns inverse of the matrix.
cacheSolve <- function(x, ...) {
# setting inverse (inv_x) to value stored in x.
inv_x <- x$getinv()
mat_x <- x$get()
dim_x = dim(mat_x) # dimension of matrix
if (dim_x[1]!=dim_x[2]) {
message("Inverse can be computed for square matrices only.")
return
}
# if inverse is calculated, return cached value.
if(!is.null(inv_x)) {
# this part checks if stored inverse is the actual inverse
eye_x = diag(dim_x[1]) # making identity matirx
err_x = eye_x - inv_x%*%mat_x # definining error as I - inv(X)*X
message("Recomputing inverse")
# if error is less than threshold (10^-8),return stored value.
if (norm(err_x)<10^-8){
message("getting cached data")
return(inv_x)
}
}
# this part executed only if inverse is not calculated,
# or the stored inverse is not actual inverse.
data <- x$get() # getting data
inv_x <-solve(data) #solving for inverse
x$setinv(inv_x) #setting inverse
inv_x
}
A<- matrix(rnorm(4,1),2,2)
cacheSolve(AA)
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix, takes a matrix and caches its value, and inverse
## cacheSolve, takes cached matrix as input, and returns inverse if its cached, if not, computes it.
makeCacheMatrix <- function(x ) {
# Checking if input is a matrix
if (!is.matrix(x)) {
message("Input must be a matrix.")
return
}
# Checking input is a square matrix
dim_x = dim(x) #dimension of input
if (dim_x[1]!=dim_x[2]) {
message("Inverse can be computed for square matrices only.")
return
}
# setting initial value
inv_x <- NULL
set <- function(y) {
x <<- y
inv_x <<- NULL
}
# get function, returns x
get <- function() x
setinv <- function(inv_set) inv_x <<- inv_set # sets inverse
getinv <- function() inv_x  # gets inverse
# making list of functions
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function returns inverse of the matrix.
cacheSolve <- function(x, ...) {
# setting inverse (inv_x) to value stored in x.
inv_x <- x$getinv()
mat_x <- x$get()
dim_x = dim(mat_x) # dimension of matrix
if (dim_x[1]!=dim_x[2]) {
message("Inverse can be computed for square matrices only.")
return
}
# if inverse is calculated, return cached value.
if(!is.null(inv_x)) {
# this part checks if stored inverse is the actual inverse
eye_x = diag(dim_x[1]) # making identity matirx
err_x = eye_x - inv_x%*%mat_x # definining error as I - inv(X)*X
# if error is less than threshold (10^-8),return stored value.
if (norm(err_x)<10^-8){
message("getting cached data")
return(inv_x)
}
message("Recomputing inverse")
}
# this part executed only if inverse is not calculated,
# or the stored inverse is not actual inverse.
data <- x$get() # getting data
inv_x <-solve(data) #solving for inverse
x$setinv(inv_x) #setting inverse
inv_x
}
A<- matrix(rnorm(4,1),2,2)
cacheSolve(AA)
A<- matrix(rnorm(4,1),2,2)
cacheSolve(AA)
A<- matrix(rnorm(4,1),2,2)
A
cacheSolve(AA)
inv_A=cacheSolve(AA)
inv_A%*%A
quit
setwd("C:/Users/Vivek/Desktop/coursera/ProgrammingAssignment2")
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix, takes a matrix and caches its value, and inverse
## cacheSolve, takes cached matrix as input, and returns inverse if its cached, if not, computes it.
makeCacheMatrix <- function(x ) {
# Checking if input is a matrix
if (!is.matrix(x)) {
message("Input must be a matrix.")
return
}
# Checking input is a square matrix
dim_x = dim(x) #dimension of input
if (dim_x[1]!=dim_x[2]) {
message("Inverse can be computed for square matrices only.")
return
}
# setting initial value
inv_x <- NULL
set <- function(y) {
x <<- y
inv_x <<- NULL
}
# get function, returns x
get <- function() x
setinv <- function(inv_set) inv_x <<- inv_set # sets inverse
getinv <- function() inv_x  # gets inverse
# making list of functions
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function returns inverse of the matrix.
cacheSolve <- function(x, ...) {
# setting inverse (inv_x) to value stored in x.
inv_x <- x$getinv()
mat_x <- x$get()
dim_x = dim(mat_x) # dimension of matrix
if (dim_x[1]!=dim_x[2]) {
message("Inverse can be computed for square matrices only.")
return
}
# if inverse is calculated, return cached value.
if(!is.null(inv_x)) {
# this part checks if stored inverse is the actual inverse
eye_x = diag(dim_x[1]) # making identity matirx
err_x = eye_x - inv_x%*%mat_x # definining error as I - inv(X)*X
# if error is less than threshold (10^-8),return stored value.
if (norm(err_x)<10^-8){
message("getting cached data")
return(inv_x)
}
message("Recomputing inverse")
}
# this part executed only if inverse is not calculated,
# or the stored inverse is not actual inverse.
data <- x$get() # getting data
inv_x <-solve(data) #solving for inverse
x$setinv(inv_x) #setting inverse
inv_x
}
A<-matrix(rnorm(4,1),2,2)
AA<-makeCacheMatrix(A)
cacheSolve(AA)
A<-matrix(rnorm(4,1),2,2)
cacheSolve(AA)
cacheSolve(AA)
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix, takes a matrix and caches its value, and inverse
## cacheSolve, takes cached matrix as input, and returns inverse if its cached, if not, computes it.
makeCacheMatrix <- function(x ) {
# Checking if input is a matrix
if (!is.matrix(x)) {
message("Input must be a matrix.")
return
}
# Checking input is a square matrix
dim_x = dim(x) #dimension of input
if (dim_x[1]!=dim_x[2]) {
message("Inverse can be computed for square matrices only.")
return
}
# setting initial value
inv_x <- NULL
set <- function(y) {
x <<- y
inv_x <<- NULL
}
# get function, returns x
get <- function() x
setinv <- function(inv_set) inv_x <<- inv_set # sets inverse
getinv <- function() inv_x  # gets inverse
# making list of functions
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function returns inverse of the matrix.
cacheSolve <- function(x, ...) {
# setting inverse (inv_x) to value stored in x.
inv_x <- x$getinv()
mat_x <- x$get()
dim_x = dim(mat_x) # dimension of matrix
if (dim_x[1]!=dim_x[2]) {
message("Inverse can be computed for square matrices only.")
return
}
# if inverse is calculated, return cached value.
if(!is.null(inv_x)) {
# this part checks if stored inverse is the actual inverse
eye_x = diag(dim_x[1]) # making identity matirx
err_x = eye_x - inv_x%*%mat_x # definining error as I - inv(X)*X
print(norm(err_x))
# if error is less than threshold (10^-8),return stored value.
if (norm(err_x)<10^-8){
message("getting cached data")
return(inv_x)
}
message("Recomputing inverse")
}
# this part executed only if inverse is not calculated,
# or the stored inverse is not actual inverse.
data <- x$get() # getting data
inv_x <-solve(data) #solving for inverse
x$setinv(inv_x) #setting inverse
inv_x
}
cacheSolve(AA)
A<-matrix(rnorm(4,1),2,2)
cacheSolve(AA)
inv_A = cacheSolve(AA)
A%*%inv_A
A<-matrix(rnorm(4,1),2,2)
AA<-makeCacheMatrix(A)
cacheSolve(AA)
A<-matrix(rnorm(4,1),2,2)
AA<-makeCacheMatrix(A)
cacheSolve(AA)
A<-matrix(rnorm(4,1),2,2)
AA<-makeCacheMatrix(A)
inv_A=cacheSolve(AA)
A%*%inv_A
inv_A=cacheSolve(AA)
